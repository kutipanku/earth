generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nationality {
  id         String   @id @default(uuid())
  flag       String?
  name_eng   String
  name_ind   String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  authors    Author[]
}

model Profession {
  id         String   @id @default(uuid())
  icon       String?
  name_eng   String
  name_ind   String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  authors    Author[]
}

model Author {
  id              String       @id @default(uuid())
  name            String
  dob             DateTime?
  nationality_id  String?
  profession_id   String?
  description_eng String?
  description_ind String?
  picture_url     String?
  slug            String       @unique
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  nationality     Nationality? @relation(fields: [nationality_id], references: [id])
  profession      Profession?  @relation(fields: [profession_id], references: [id])
  quotes          Quote[]
}

model Category {
  id              String   @id @default(uuid())
  name_eng        String
  name_ind        String
  description_eng String?
  description_ind String?
  slug            String   @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  quotes          Quote[]
}

model Tag {
  id              String   @id @default(uuid())
  name_eng        String
  name_ind        String
  description_eng String?
  description_ind String?
  slug            String   @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  quotes          Quote[]  @relation("QuoteToTag")
}

model Quote {
  id              String    @id @default(uuid())
  content_ind     String?
  image_url_ind   String?
  image_url_eng   String?
  author_id       String?
  description_eng String?
  description_ind String?
  slug            String    @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  category_id     String?
  content_eng     String?
  author          Author?   @relation(fields: [author_id], references: [id])
  category        Category? @relation(fields: [category_id], references: [id])
  tags            Tag[]     @relation("QuoteToTag")
  likes           User[]    @relation("QuoteToUser")
}

model Product {
  id                      String   @id @default(uuid())
  slug                    String   @unique
  name_eng                String
  name_ind                String
  description_eng         String?
  description_ind         String?
  affiliate_url_tokopedia String?
  affiliate_url_shopee    String?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  media_attachments       Media[]
}

model Media {
  id         String   @id @default(uuid())
  url        String?
  product_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product? @relation(fields: [product_id], references: [id])
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phone       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  picture_url String?
  slug        String   @unique
  likes       Quote[]  @relation("QuoteToUser")
}

model Admin {
  id    String @id @default(uuid())
  name  String
  email String @unique
  logs  Log[]
}

model Log {
  id         String   @id @default(uuid())
  action     String
  admin_id   String
  created_at DateTime @default(now())
  entity     String
  data       String
  data_id    String
  data_old   String
  admin      Admin    @relation(fields: [admin_id], references: [id])
}
