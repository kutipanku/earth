generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String   @unique
  email       String   @unique
  phone       String?  @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  picture_url String?
  likes       Quote[]  @relation("QuoteToUser")
}

model SuperUser {
  id          String  @id @default(uuid())
  name        String  @unique
  email       String  @unique
  picture_url String?
  logs        Log[]
}

model Nationality {
  id         String   @id @default(uuid())
  flag       String?
  name_en    String   @unique
  name_id    String   @unique
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  authors    Author[]
}

model Profession {
  id         String   @id @default(uuid())
  icon       String?
  name_en    String   @unique
  name_id    String   @unique
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  authors    Author[]
}

model Author {
  id             String       @id @default(uuid())
  name           String       @unique
  dob            DateTime?
  nationality_id String?
  profession_id  String?
  description_en String?
  description_id String?
  picture_url    String?
  slug           String       @unique
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  nationality    Nationality? @relation(fields: [nationality_id], references: [id])
  profession     Profession?  @relation(fields: [profession_id], references: [id])
  quotes         Quote[]
}

model Quote {
  id             String   @id @default(uuid())
  content_id     String?
  content_en     String?
  image_id_url   String?
  image_en_url   String?
  author_id      String?
  description_en String?
  description_id String?
  slug           String   @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  author         Author?  @relation(fields: [author_id], references: [id])
  tags           Tag[]    @relation("QuoteToTag")
  likes          User[]   @relation("QuoteToUser")
}

model Tag {
  id             String   @id @default(uuid())
  name_en        String   @unique
  name_id        String   @unique
  description_en String?
  description_id String?
  slug           String   @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  quotes         Quote[]  @relation("QuoteToTag")
}

model Product {
  id                      String   @id @default(uuid())
  slug                    String   @unique
  name_en                 String   @unique
  name_id                 String   @unique
  description_en          String?
  description_id          String?
  affiliate_tokopedia_url String?
  affiliate_shopee_url    String?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  media_attachments       Media[]
}

model Media {
  id         String   @id @default(uuid())
  url        String?
  product_id String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product? @relation(fields: [product_id], references: [id])
}

model Log {
  id          String    @id @default(uuid())
  action      String
  category    String
  content_old String
  content_new String
  object      String
  user_id     String
  created_at  DateTime  @default(now())
  user        SuperUser @relation(fields: [user_id], references: [id])
}
